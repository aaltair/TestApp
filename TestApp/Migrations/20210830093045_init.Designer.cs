// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestApp.Persistent.Contexts;

namespace TestApp.Migrations
{
    [DbContext(typeof(TestAppDbContext))]
    [Migration("20210830093045_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "4643afee-eeb8-460c-8bf9-256613cb77c5",
                            ConcurrencyStamp = "ef4f3db5-6267-4a55-ba19-79016d7a33ae",
                            Name = "superadmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "c172130d-a149-412d-aa77-0b9986ebce6e",
                            ConcurrencyStamp = "1836d6d4-f607-4f40-9168-f88d9e9a295b",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "52a4b656-2cec-4da1-ac36-d4468e9e1d25",
                            ConcurrencyStamp = "e6786c5c-b8ae-4bb6-b6d9-7827bd097e8d",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "2e6bf32d-a0f3-4188-a1e2-5c2cfecffcae",
                            RoleId = "4643afee-eeb8-460c-8bf9-256613cb77c5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TestApp.Core.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Translate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "2e6bf32d-a0f3-4188-a1e2-5c2cfecffcae",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1993, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "f0f9a1aa-14a9-45aa-8009-a3f4459ee0d2",
                            CreatedOn = new DateTime(2021, 8, 30, 12, 30, 44, 740, DateTimeKind.Local).AddTicks(9407),
                            Email = "aaltair.developer@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alaa",
                            IsDeleted = false,
                            LastName = "Altair",
                            LockoutEnabled = false,
                            NormalizedEmail = "AALTAIR.DEVELOPER@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEHE6jAIIoTc523Fw4xT5kvdV80+dY3v0OW/czoJZaCcfmgbdJrp0mtC+ApKS/Ljb+A==",
                            PhoneNumber = "+962788260020",
                            PhoneNumberConfirmed = true,
                            SecondName = "Abbas",
                            SecurityStamp = "",
                            Translate = @"{
  ""ar"": {
    ""FirstName"": ""Alaa1"",
    ""SecondName"": ""Abbas1"",
    ""LastName"": ""Altair1"",
    ""ProfileImg"": null,
    ""BirthDate"": ""1993-01-27T00:00:00"",
    ""IsDeleted"": false,
    ""CreatedBy"": null,
    ""CreatedOn"": ""2021-08-30T12:30:44.615797+03:00"",
    ""UpdatedBy"": null,
    ""UpdateOn"": null,
    ""Translate"": null,
    ""Id"": ""2e6bf32d-a0f3-4188-a1e2-5c2cfecffcae"",
    ""UserName"": ""admin"",
    ""NormalizedUserName"": ""ADMIN"",
    ""Email"": ""aaltair.developer@gmail.com"",
    ""NormalizedEmail"": ""AALTAIR.DEVELOPER@GMAIL.COM"",
    ""EmailConfirmed"": true,
    ""PasswordHash"": ""AQAAAAEAACcQAAAAEM4MvbeLFAKv44/jeo3waSxTt+2r6EtmWTneOrBQPPbSCRfNc6HhawVbfJYcxParwQ=="",
    ""SecurityStamp"": """",
    ""ConcurrencyStamp"": ""0bab02bd-1a8a-410a-b083-cd8cb61ffb4f"",
    ""PhoneNumber"": ""+962788260020"",
    ""PhoneNumberConfirmed"": true,
    ""TwoFactorEnabled"": false,
    ""LockoutEnd"": null,
    ""LockoutEnabled"": false,
    ""AccessFailedCount"": 0
  },
  ""en"": {
    ""FirstName"": ""Alaa"",
    ""SecondName"": ""Abbas"",
    ""LastName"": ""Altair"",
    ""ProfileImg"": null,
    ""BirthDate"": ""1993-01-27T00:00:00"",
    ""IsDeleted"": false,
    ""CreatedBy"": null,
    ""CreatedOn"": ""2021-08-30T12:30:44.7409407+03:00"",
    ""UpdatedBy"": null,
    ""UpdateOn"": null,
    ""Translate"": null,
    ""Id"": ""2e6bf32d-a0f3-4188-a1e2-5c2cfecffcae"",
    ""UserName"": ""admin"",
    ""NormalizedUserName"": ""ADMIN"",
    ""Email"": ""aaltair.developer@gmail.com"",
    ""NormalizedEmail"": ""AALTAIR.DEVELOPER@GMAIL.COM"",
    ""EmailConfirmed"": true,
    ""PasswordHash"": ""AQAAAAEAACcQAAAAEHE6jAIIoTc523Fw4xT5kvdV80+dY3v0OW/czoJZaCcfmgbdJrp0mtC+ApKS/Ljb+A=="",
    ""SecurityStamp"": """",
    ""ConcurrencyStamp"": ""f0f9a1aa-14a9-45aa-8009-a3f4459ee0d2"",
    ""PhoneNumber"": ""+962788260020"",
    ""PhoneNumberConfirmed"": true,
    ""TwoFactorEnabled"": false,
    ""LockoutEnd"": null,
    ""LockoutEnabled"": false,
    ""AccessFailedCount"": 0
  }
}",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("TestApp.Core.Entities.Lookup.LookupItem", b =>
                {
                    b.Property<int>("LookupItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LookupItemCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LookupItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LookupTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentLookupItemId")
                        .HasColumnType("int");

                    b.Property<string>("Translate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LookupItemId");

                    b.HasIndex("LookupTypeId");

                    b.HasIndex("ParentLookupItemId");

                    b.ToTable("LookupItem");
                });

            modelBuilder.Entity("TestApp.Core.Entities.Lookup.LookupType", b =>
                {
                    b.Property<int>("LookupTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LookupTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LookupTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Translate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LookupTypeId");

                    b.ToTable("LookupType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TestApp.Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TestApp.Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestApp.Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TestApp.Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestApp.Core.Entities.Lookup.LookupItem", b =>
                {
                    b.HasOne("TestApp.Core.Entities.Lookup.LookupType", "LookupType")
                        .WithMany("LookupItems")
                        .HasForeignKey("LookupTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestApp.Core.Entities.Lookup.LookupItem", "ParentLookupItem")
                        .WithMany()
                        .HasForeignKey("ParentLookupItemId");
                });
#pragma warning restore 612, 618
        }
    }
}
